A Thread is just a process
	- Each game will count as a process
A Semaphore is a varible that is ehtier waiting or signaling
	- I think we will be using a counting semaphore of 8 (one for each die)
		- So only the game parlor knows the # of availble die

NOTES: 
- when you create the semaphore, join them so they run, and have a sleep in there so other processes can squeeze in a semaphore
- WATCH OUT FOR DEADLOCKS!!!	 

Idea for now: 
We will create an array of 8 threads
	- We know that 0,1 will be backgram, and 2,3 will be like pictionary of something
each thread will run the sem_getvalue command
	- if getV > neededDice { sem_post_np(-1*neededDice); } else { sem_wait }
Once we get all threads to run, and they are all random, then we will implement the process of running each thread 5x

The barber shop example should help with this problem, here are some comparisons
- Customers -> game (both are just threads) 
- num_chairs -> num_dice (just a global define) 
- chair_mutex -> dice_mutex (states if a die is avaible at all) 
- sem_customer -> sem_game(8) (post and wait for # needed dice)

Before you start, please complete the following tasks to use as building blocks for this project: 
1. Make a function that is able to run a number of threads with a counting semaphore (DONE)
2. Take 1. and now each thread ask for a different # of semaphores to use / signal
3. Now take 2. except each thread has to have run at least 3x

Once you figure the building block problems out, finishing the game parlor problem should not be too difficult

